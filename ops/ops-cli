#!/bin/bash

RED='\033[0;31m'
NC='\033[0m'
bold=$(tput bold)
normal=$(tput sgr0)

POSITIONAL=()
while [[ $# -gt 0 ]]
do
key="$1"
KILL_FLAG=false
RESTART_FLAG=false
TEST_FLAG=false
REMOTE_USER=ubuntu
INVENTORY_FILE="hosts"

case $key in
    -c|--cluster_id)
    CLUSTER_ID="$2"
    shift # past argument
    shift # past value
    ;;
    -n|--network)
    NETWORK_DIR_PATH="$2"
    shift # past argument
    shift # past value
    ;;
    -k|--kill)
    KILL_FLAG=true
    shift # past argument
    shift # past value
    ;;
    -r|--restart)
    RESTART_FLAG=true
    shift # past argument
    shift # past value
    ;;
    -t|--test)
    TEST_FLAG=true
    shift # past argument
    shift # past value
    ;;
    -h|--hosts)
    HOSTS_PATH="$2"
    shift # past argument
    shift # past value
    ;;
    -u|--user)
    REMOTE_USER="$2"
    shift # past argument
    shift # past value
    ;;
    -i|--private_key)
    KEY_FILE="$2"
    shift # past argument
    shift # past value
    ;;
    --default)
    DEFAULT=YES
    shift # past argument
    ;;
    *)    # unknown option
    POSITIONAL+=("$1") # save it in an array for later
    shift # past argument
    ;;
esac
done
set -- "${POSITIONAL[@]}" # restore positional parameters

# echo CLUSTER_ID = "${CLUSTER_ID}"
# echo NETWORK_DIR_PATH = "${NETWORK_DIR_PATH}"
# echo KILL_FLAG = "${KILL_FLAG}"
# echo DEFAULT = "${DEFAULT}"

if [ -z ${HOSTS_PATH+x} ]; then
    echo ${bold}AWS mode${normal}
    INVENTORY_FILE="ec2.py"
    AWS_ENABLED="True"
else
    echo ${bold}Static inventory mode${normal} with ${HOSTS_PATH}
    INVENTORY_FILE="${HOSTS_PATH}"
    AWS_ENABLED="False"
fi

if [ -z ${CLUSTER_ID+x} ]; then
    echo ${bold}Cluster id is not set${normal}
    echo Please input cluster id:
    read CLUSTER_ID
fi

echo Going to manage cluster ${bold}"${CLUSTER_ID}"${normal}

if [ -e cluster_configs/${CLUSTER_ID}.yaml ]
then
    echo Cluster config exists
else
    printf "${RED}ERROR: Can not find cluster_configs/${CLUSTER_ID}.yaml to handle, exiting...${NC}\n"
    exit
fi

if [ -z ${KEY_FILE} ]
then
    printf "${RED}ERROR: Can not find key file to use (use -i to set), exiting...${NC}\n"
    exit
else
    echo Key file exists
fi

if [ -e group_vars/all/config.yaml ]
then
    rm group_vars/all/config.yaml
fi

cp cluster_configs/${CLUSTER_ID}.yaml group_vars/all/config.yaml

if [ "$TEST_FLAG" = true ]
then
    ansible-playbook aws-project-tester.yaml -i ${INVENTORY_FILE} -u ${REMOTE_USER} --private-key ${KEY_FILE} --extra-vars "cluster_id=${CLUSTER_ID} aws_enabled=${AWS_ENABLED}"
    exit
else
    echo "Test flag not set"
fi

if [ "$RESTART_FLAG" = true ]
then
    ansible-playbook aws-project-restarter.yaml -i ${INVENTORY_FILE} -u ${REMOTE_USER} --private-key ${KEY_FILE} --extra-vars "cluster_id=${CLUSTER_ID} aws_enabled=${AWS_ENABLED}"
    exit
else
    echo "Restart flag not set"
fi

if [ "$KILL_FLAG" = true ]
then
    echo ${bold}Kill${normal} mode is activated, starting ansible cluster-killer...
    ansible-playbook subplaybooks/aws-cluster-killer.yaml -i ${INVENTORY_FILE} --extra-vars "cluster_id=${CLUSTER_ID} aws_enabled=${AWS_ENABLED}"
else
    echo ${bold}Deploy${normal} mode is activated, starting ansible cluster-deploy...
    if [ -z "$NETWORK_DIR_PATH" ]
    then
        echo ${bold}Network folder was not set and will be created automatically: network_dist${normal}
        ansible-playbook aws-project-starter.yaml -i ${INVENTORY_FILE} -u ${REMOTE_USER} --private-key ${KEY_FILE} --extra-vars "cluster_id=${CLUSTER_ID} aws_enabled=${AWS_ENABLED}"
    else
        if [ -e ${NETWORK_DIR_PATH} ]
        then
            echo ${bold}Network folder set and exists: ${NETWORK_DIR_PATH}${normal}
            ansible-playbook aws-project-starter.yaml -i ${INVENTORY_FILE} -u ${REMOTE_USER} --private-key ${KEY_FILE} --extra-vars "cluster_id=${CLUSTER_ID} network_dir=${NETWORK_DIR_PATH} aws_enabled=${AWS_ENABLED}"
        else
            printf "${RED}ERROR: Network folder was set but not found: ${NETWORK_DIR_PATH}, exiting...${NC}\n"
            exit
        fi
    fi
fi