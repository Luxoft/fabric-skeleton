---
- name: Load OS specific variables
  include_vars: "{{ item }}"
  with_first_found:
    - files:
        - "{{ ansible_os_family|lower }}-{{ ansible_distribution_major_version }}.yml"
        - "{{ ansible_os_family|lower }}-{{ ansible_distribution|lower }}.yml"
        - "{{ ansible_os_family|lower }}.yml"
        - defaults.yml
      paths:
        - ../vars

- name: Install epel-release
  yum:
    name: "{{ epel_yum }}"
    state: present
    update_cache: yes
  ignore_errors: true
  register: epel_result
  when: ansible_os_family == "RedHat"

- name: Install epel-release (rpm)
  yum:
    name: "{{ epel_rpm_url }}"
    state: present
  when: ansible_os_family == "RedHat" and epel_result|failed

- name: Ensure required packages are installed (yum)
  yum:
    name: "{{ item }}"
    update_cache: yes
    state: installed
  with_items: "{{ packages|default([]) }}"
  when: ansible_os_family == "RedHat"

- name: Ensure required packages are installed (apt)
  apt:
    name: "{{ item }}"
    update_cache: yes
    state: installed
  with_items: "{{ packages|default([]) }}"
  when: ansible_os_family == "Debian"

- name: Upgrade all packages (yum)
  yum: name=* state=latest
  when: ansible_os_family == "RedHat"

- name: Upgrade all packages (apt)
  apt: upgrade=dist
  when: ansible_os_family == "Debian"

- name: Make sure the NTP service is stopped
  service: name={{ ntp_service }} state=stopped

- name: Force NTP sync
  command: "{{ ntp_sync }}"

- name: Start the NTP service
  service: name={{ ntp_service }} state=started enabled=yes

- name: Set nofile limits
  lineinfile: dest=/etc/security/limits.conf
              insertbefore="^# End of file"
              state=present
              line="{{ item }}"
  with_items:
    - "* soft nofile 32768"
    - "* hard nofile 32768"

- name: Set nproc limits
  lineinfile: dest=/etc/security/limits.d/90-nproc.conf
              insertafter=EOF
              state=present
              create=yes
              line="{{ item }}"
              mode=0644
  with_items:
    - "* soft nproc 32768"
    - "* hard nproc 32768"

- name: Set swappiness to 1
  sysctl: name=vm.swappiness value=1 state=present ignoreerrors=yes

- name: Get number of kernels in grub.conf
  shell: grep -E "^[[:blank:]]*kernel" /boot/grub/grub.conf | grep -v transparent_hugepage
  register: grep_result
  when: ansible_os_family == "RedHat" and (ansible_distribution == "Amazon" or ansible_distribution_major_version == "6")
  ignore_errors: true

- name: Disable Transparent Huge Pages in Grub 1
  lineinfile: dest=/boot/grub/grub.conf
              backrefs=True
              state=present
              regexp='(^\s*kernel(\s+(?!transparent_hugepage=never)[\w=/\-\.\,]+)*)\s*$'
              line='\1 transparent_hugepage=never'
  with_items: "{{ grep_result.stdout_lines | default('') }}"
  when: ansible_os_family == "RedHat" and (ansible_distribution == "Amazon" or ansible_distribution_major_version == "6")

- name: Disable Transparent Huge Pages in Grub 2
  lineinfile: dest=/etc/default/grub
              state=present
              line='GRUB_CMDLINE_LINUX=$GRUB_CMDLINE_LINUX" transparent_hugepage=never"'
  when: ansible_distribution_major_version|int > 6
  notify: Run update-grub

- meta: flush_handlers

- name: Disable Transparent Huge Pages until reboot
  shell: echo never > /sys/kernel/mm/transparent_hugepage/enabled && echo never > /sys/kernel/mm/transparent_hugepage/defrag
  ignore_errors: true

- name: Set the tuned profile
  copy: src=tuned.conf
        dest=/etc/tuned/cassandra/
        mode=0755
  when: ansible_os_family == "RedHat" and ansible_distribution_major_version == "7"

- name: Activate the tuned profile
  shell: tuned-adm profile cassandra
  when: ansible_os_family == "RedHat" and ansible_distribution_major_version == "7"

- name: Set hosts file
  template: src=hosts.j2 dest=/etc/hosts mode=0644

- name: Include firewall.yml
  include: firewall.yml
  when: rax_id is defined

- name: Include partitioning.yml
  include: partitioning.yml
  with_items:
    - "{{ data_disks_devices|default([]) }}"

- name: Mount kafka data disks under /disk/{0..n}
  mount: state=mounted
         src="/dev/{{ item.1 }}1"
         name="/disk/{{ item.0 + 1 }}"
         fstype="{{ data_disks_filesystem }}"
         opts=defaults,noatime
         dump=0
         passno=0
  with_indexed_items: "{{ data_disks_devices|default([]) }}"
  when: data_disks_devices is defined and data_disks_devices and ansible_devices[item.1] is defined
